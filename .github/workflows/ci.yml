name: CI

on: push

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-build-${{ hashFiles('**/Cargo.lock') }}

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          default: true
          profile: minimal
          toolchain: stable

      - name: cargo build
        uses: actions-rs/cargo@v1
        with:
          command: build

  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-lint-${{ hashFiles('**/Cargo.lock') }}

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          default: true
          profile: minimal
          toolchain: stable
          components: rustfmt, clippy

      - name: cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: cargo clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features -- -D warnings

  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ""
          POSTGRES_DB: postgres
        ports:
          # will assign a random free host port
          - 5432/tcp
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      redis:
        image: redis:latest
        ports:
          - 6379/tcp
        options: --entrypoint redis-server

    steps:
      - uses: actions/checkout@v2

      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-test-${{ hashFiles('**/Cargo.lock') }}

      - run: sudo apt-get install libpq-dev openssl postgresql

      - name: Install diesel cli
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: diesel_cli --no-default-features --features=postgres

      - name: Install nightly toolchain
        uses: actions-rs/toolchain@v1
        with:
          default: true

      - name: Setup db
        run: |
          psql -h localhost -p $DATABASE_PORT -c 'create database test;' -U postgres
          diesel database setup --database-url=$DATABASE_URL
        env:
          DATABASE_PORT: ${{ job.services.postgres.ports[5432] }}
          DATABASE_URL: postgres://postgres@localhost:${{ job.services.postgres.ports[5432] }}/test

      - name: cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test
        env:
          CARGO_INCREMENTAL: "0"
          RUSTFLAGS: "-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Zno-landing-pads"
          DATABASE_URL: postgres://postgres@localhost:${{ job.services.postgres.ports[5432] }}/test
          REDIS_URL: redis://localhost:${{ job.services.redis.ports[6379] }}

      - id: coverage
        uses: actions-rs/grcov@v0.1

      - name: Coveralls upload
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: ${{ steps.coverage.outputs.report }}
