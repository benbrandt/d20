language: rust

# Global settings
branches:
  only:
    - master

stages:
  - name: test
    if: type != cron

cache: cargo

before_cache:
  - rm -rf "$TRAVIS_HOME/.cargo/registry/src"
  - ./bin/nightly-cleanup.sh
  - cargo sweep --file
  - cargo sweep -i

notifications:
  email:
    on_success: always

jobs:
  include:
    - stage: test
      addons:
        apt:
          packages:
            - jq
      services:
        - postgresql
        - redis-server
      before_install:
        - curl -L https://github.com/mozilla/grcov/releases/latest/download/grcov-linux-x86_64.tar.bz2 | tar jxf -
        - rustup component add clippy
        - rustup component add rustfmt
        # Make sure local dev environment will work as well for nightly toolchains
        - rustup component add rls
        - rustup component add rust-analysis
        - rustup component add rust-src
        # Intall cargo tools if not installed
        # - cargo audit --version | grep $(curl 'https://crates.io/api/v1/crates/cargo-audit' | jq '.crate.max_version' | tr -d '"') || cargo install cargo-audit --force
        - diesel --version | grep $(curl 'https://crates.io/api/v1/crates/diesel_cli' | jq '.crate.max_version' | tr -d '"') || cargo install diesel_cli --no-default-features --features=postgres --force
        - cargo-sweep --version | grep $(curl 'https://crates.io/api/v1/crates/cargo-sweep' | jq '.crate.max_version' | tr -d '"') || cargo install cargo-sweep --force
      before_script:
        - cargo sweep --stamp
        # Setup database
        - psql -c 'create database travis_ci_test;' -U postgres
        - echo "DATABASE_URL=postgres://postgres@localhost/travis_ci_test" >> .env
        - echo "REDIS_URL=redis://localhost" >> .env
        - diesel database setup --database-url=postgres://postgres@localhost/travis_ci_test
      script:
        - export CARGO_INCREMENTAL=0
        - export RUSTFLAGS="-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Zno-landing-pads"
        # - cargo audit
        - cargo fmt --all -- --check
        - cargo build
        - cargo clippy --all-targets -- -D warnings
        - cargo test
      after_success:
        - |
          zip -0 ccov.zip `find . \( -name "d20*.gc*" \) -print`;
          ./grcov ccov.zip -s . -t lcov --llvm --branch --ignore-not-existing --ignore-dir "/*" -o lcov.info;
          bash <(curl -s https://codecov.io/bash) -f lcov.info;
